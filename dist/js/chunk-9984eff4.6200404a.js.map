{"version":3,"sources":["webpack:///./src/api/interceptors.js","webpack:///./src/api/index.js","webpack:///./src/api/modules/post.js"],"names":["setInterceptors","instance","interceptors","request","use","config","headers","Authorization","store","state","userInfo","apchTknVal","app_os_code","getters","app_version","bus","$emit","error","msg","response","data","message","time","console","Promise","reject","code","bridge","callNative","getToken","commit","root","router","push","status","createWithAuth","options","baseUrl","process","axios","create","Object","assign","baseURL","timeout","responseEncoding","getPostCategory","get","getRecPostList","getPostList","params","getPostDetail","getPostQuizAnswer","postBookmark","post","postShare"],"mappings":"2QAKA,SAASA,EAAgBC,GAqIvB,OApIAA,EAASC,aAAaC,QAAQC,KAC5B,SAACC,GAKC,OAJAA,EAAOC,QAAQC,cAAgBC,OAAMC,MAAMC,SAASC,WACpDN,EAAOC,QAAQM,YAAcJ,OAAMK,QAAQ,sBAC3CR,EAAOC,QAAQQ,YAAcN,OAAMK,QAAQ,0BAC3CE,OAAIC,MAAM,WAAW,GACdX,KAET,SAACY,GAIC,OAHAF,OAAIC,MAAM,WAAW,GACrBD,OAAIC,MAAM,QAAS,CAAEE,IAAKD,EAAME,SAASC,KAAKC,QAASC,KAAM,MAC7DC,QAAQN,MAAMA,GACPO,QAAQC,OAAOR,EAAME,aAGhClB,EAASC,aAAaiB,SAASf,KAC7B,SAACC,GAEC,OADAU,OAAIC,MAAM,WAAW,GACdX,EAAOe,OAHlB,yDAKE,WAAOH,GAAP,0FACEF,OAAIC,MAAM,WAAW,GAIY,WAA7BC,EAAME,SAASC,KAAKM,OACtBC,OAAOC,WAAWC,WAClBd,OAAIC,MAAM,QAAS,CACjBE,IAAK,WAgFwB,WAA7BD,EAAME,SAASC,KAAKM,KAxF1B,wBA0FMlB,OAAMsB,OAAO,qBAAqB,EAAM,CAAEC,MAAM,IA1FtD,SA2FYC,OAAOC,KAAK,QA3FxB,+BA6FMlB,OAAIC,MAAM,QAAS,CACjBE,IAAK,eA9Fb,WAmGiC,OAA3B,UAAAD,EAAME,gBAAN,eAAgBe,QAnGtB,wBAqGM1B,OAAMsB,OAAO,qBAAqB,EAAM,CAAEC,MAAM,IArGtD,UAsGYC,OAAOC,KAAK,QAtGxB,gCAwGMlB,OAAIC,MAAM,QAAS,CACjBE,IAAK,UAzGb,iCA6GSM,QAAQC,OAAOR,EAAME,WA7G9B,4CALF,uDAqHOlB,ECvIT,SAASkC,EAAeC,GAEtB,IAAMC,EACJ,UACOC,4BADP,aAGIrC,EAAWsC,IAAMC,OACrBC,OAAOC,OACL,CACEC,QAASN,EACTO,QAAS,EACTC,iBAAkB,QAJtBJ,OAAA,OAAAA,CAAA,GAOOL,KAKT,OADApC,EAAgBC,GACTA,EAGF,IAAMA,EAAWkC,K,kCCzBxB,8PAOA,SAASW,IACP,OAAO7C,OAAS8C,IAAT,qBAQT,SAASC,IACP,OAAO/C,OAAS8C,IAAT,iBAQT,SAASE,EAAYC,GACnB,OAAOjD,OAAS8C,IAAT,gBAA8B,CAAEG,OAAQA,IAQjD,SAASC,EAAcD,GACrB,OAAOjD,OAAS8C,IAAT,gBAA8B,CAAEG,OAAQA,IAQjD,SAASE,EAAkBF,GACzB,OAAOjD,OAAS8C,IAAT,gBAA8B,CAAEG,OAAQA,IAQjD,SAASG,EAAaH,GACpB,OAAOjD,OAASqD,KAAT,gBAA+BJ,GAQxC,SAASK,EAAUL,GACjB,OAAOjD,OAASqD,KAAT,gBAA+BJ","file":"js/chunk-9984eff4.6200404a.js","sourcesContent":["import bus from '@/utils/bus';\nimport bridge from '@/utils/WebViewBridgeDefault';\nimport store from '@/store';\nimport router from '@/router';\n\nfunction setInterceptors(instance) {\n  instance.interceptors.request.use(\n    (config) => {\n      config.headers.Authorization = store.state.userInfo.apchTknVal;\n      config.headers.app_os_code = store.getters['deviceInfo/OS_CODE'];\n      config.headers.app_version = store.getters['deviceInfo/APP_VERSION'];\n      bus.$emit('loading', true);\n      return config;\n    },\n    (error) => {\n      bus.$emit('loading', false);\n      bus.$emit('toast', { msg: error.response.data.message, time: 3000 });\n      console.error(error);\n      return Promise.reject(error.response);\n    }\n  );\n  instance.interceptors.response.use(\n    (config) => {\n      bus.$emit('loading', false);\n      return config.data;\n    },\n    async (error) => {\n      bus.$emit('loading', false);\n      //bus.$emit('toast', { msg: error.response.data.message, time: 3000 });\n\n      // \t토큰 만료\n      if (error.response.data.code === 'ERR104') {\n        bridge.callNative.getToken();\n        bus.$emit('toast', {\n          msg: '토큰 만료',\n        });\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        // Server Unchecked Exception (서버 에러) -> 백엔드팀에 문의\n        if (error.response.data.code === 'ERR001') {\n          bus.$emit('toast', {\n            msg: '서버 에러',\n          });\n        }\n\n        // Bxm Unchecked Exception (BXM 에러) -> 백엔드팀에 문의\n        if (error.response.data.code === 'ERR002') {\n          bus.$emit('toast', {\n            msg: 'BXM 에러',\n          });\n        }\n\n        // 시스템점검\n        if (error.response.data.code === 'ERR003') {\n          bus.$emit('toast', {\n            msg: '시스템점검',\n          });\n        }\n\n        // \t강제 앱 업데이트\n        if (error.response.data.code === 'ERR004') {\n          bus.$emit('toast', {\n            msg: '강제 앱 업데이트',\n          });\n        }\n\n        // \t접근 권한 에러\n        if (error.response.data.code === 'ERR102') {\n          bus.$emit('toast', {\n            msg: '접근 권한 에러',\n          });\n        }\n\n        // \t토큰 위변조\n        if (error.response.data.code === 'ERR105') {\n          bus.$emit('toast', {\n            msg: '토큰 위변조',\n          });\n        }\n\n        // \t토큰이 없습니다.\n        if (error.response.data.code === 'ERR106') {\n          bus.$emit('toast', {\n            msg: '토큰이 없습니다.',\n          });\n        }\n\n        // \t비밀번호가 변경되었습니다. 재 로그인해주세요.\n        if (error.response.data.code === 'ERR110') {\n          bus.$emit('toast', {\n            msg: '비밀번호가 변경되었습니다. 재 로그인해주세요.',\n          });\n        }\n        // \t파라메터 유효성 검사 에러\n        if (error.response.data.code === 'ERR301') {\n          bus.$emit('toast', {\n            msg: '파라메터 유효성 검사 에러',\n          });\n        }\n\n        // \t등록, 수정 처리 실패\n        if (error.response.data.code === 'ERR302') {\n          bus.$emit('toast', {\n            msg: '등록, 수정 처리 실패',\n          });\n        }\n\n        if (error.response?.status === 400) {\n          bus.$emit('toast', { msg: '클라이언트 에러' });\n        }\n      }\n\n      // \t삭제된 데이터 요청\n      if (error.response.data.code === 'ERR303') {\n        if (process.env.NODE_ENV === 'production') {\n          store.commit('MU_CAN_LEAVE_SITE', true, { root: true });\n          await router.push('/404');\n        } else {\n          bus.$emit('toast', {\n            msg: '삭제된 데이터 요청',\n          });\n        }\n      }\n\n      if (error.response?.status === 500) {\n        if (process.env.NODE_ENV === 'production') {\n          store.commit('MU_CAN_LEAVE_SITE', true, { root: true });\n          await router.push('/500');\n        } else {\n          bus.$emit('toast', {\n            msg: '500에러',\n          });\n        }\n      }\n      return Promise.reject(error.response);\n    }\n  );\n  return instance;\n}\n\nexport { setInterceptors };\n","import axios from 'axios';\nimport { setInterceptors } from './interceptors';\n\nfunction createWithAuth(options) {\n  // console.log(process.env.NODE_ENV);\n  const baseUrl =\n    process.env.NODE_ENV !== 'local'\n      ? `${process.env.VUE_APP_API_URL}/b2c/api/`\n      : '/b2c/api/';\n  const instance = axios.create(\n    Object.assign(\n      {\n        baseURL: baseUrl,\n        timeout: 0,\n        responseEncoding: 'utf8',\n      },\n      {\n        ...options,\n      }\n    )\n  );\n  setInterceptors(instance);\n  return instance;\n}\n\nexport const instance = createWithAuth();\n","import { instance } from '../index';\n\n/**\n * 포스트 카테고리 조회\n * @author 김도은\n * @return {object} 요청한 데이터\n */\nfunction getPostCategory() {\n  return instance.get(`/ccomgroup/CTS001`);\n}\n/**\n * 포스트 추천 목록 조회\n * @author 김도은\n * @param {object}\n * @return {object} 요청한 데이터\n */\nfunction getRecPostList() {\n  return instance.get(`/ccon0101r001`);\n}\n/**\n * 포스트 목록 조회\n * @author 김도은\n * @param {object} params 요청시 필요한 필수 파라미터 page(페이지 번호), size(페이지 노출 로우 수)\n * @return {object} 요청한 데이터\n */\nfunction getPostList(params) {\n  return instance.get(`/ccon0101r002`, { params: params });\n}\n/**\n * 포스트 상세 조회\n * @author 김도은\n * @param {object} params 요청시 필요한 필수 파라미터 postCtgrCd(포스트카테고리코드), postSno(포스트일련번호)\n * @return {object} 요청한 데이터\n */\nfunction getPostDetail(params) {\n  return instance.get(`/ccon0201r001`, { params: params });\n}\n/**\n * 포스트 상세 퀴즈 정답 조회\n * @author 김도은\n * @param {object} params 요청시 필요한 필수 파라미터 postAnswVal(퀴즈 정답 값), postSno(포스트일련번호)\n * @return {object} 요청한 데이터\n */\nfunction getPostQuizAnswer(params) {\n  return instance.get(`/ccon0201r002`, { params: params });\n}\n/**\n * 포스트 상세 북마크 상태 전송\n * @author 김도은\n * @param {object} params 요청시 필요한 필수 파라미터 postCtgrCd(포스트카테고리코드), postSno(포스트일련번호)\n * @return {object} 요청한 데이터\n */\nfunction postBookmark(params) {\n  return instance.post(`/ccon0201c002`, params);\n}\n/**\n * 포스트 상세 공유 이력 전송\n * @author 김도은\n * @param {object} params 요청시 필요한 필수 파라미터 cmmnMdiaDvCd(포스트카테고리코드), postSno(포스트일련번호)\n * @return {object} 요청한 데이터\n */\nfunction postShare(params) {\n  return instance.post(`/ccon0201c001`, params);\n}\nexport {\n  getPostCategory,\n  getRecPostList,\n  getPostList,\n  getPostDetail,\n  getPostQuizAnswer,\n  postBookmark,\n  postShare,\n};\n"],"sourceRoot":""}